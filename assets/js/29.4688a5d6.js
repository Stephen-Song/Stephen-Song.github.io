(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{470:function(t,s,v){"use strict";v.r(s);var _=v(26),a=Object(_.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"进程和线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[t._v("#")]),t._v(" 进程和线程")]),t._v(" "),v("h2",{attrs:{id:"介绍一下进程和线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下进程和线程"}},[t._v("#")]),t._v(" 介绍一下进程和线程"),v("badge",{attrs:{text:"特别重要",type:"error"}})],1),t._v(" "),v("p",[v("strong",[t._v("概念")]),t._v("：从本质来说，进程和线程都是"),v("code",[t._v("cpu")]),t._v("工作时间片的描述")]),t._v(" "),v("ul",[v("li",[t._v("进程描述了"),v("code",[t._v("cpu")]),t._v("在"),v("strong",[t._v("运行指令")]),t._v("及"),v("strong",[t._v("加载和保存上下文")]),t._v("所需的时间，放在应用上来说就是一个程序")]),t._v(" "),v("li",[t._v("线程是进程更小的单位，描述了"),v("strong",[t._v("执行一段指令所需的时间")])])]),t._v(" "),v("p",[v("strong",[v("mark",[t._v("进程是资源分配的最小单位，而线程是"),v("code",[t._v("cpu")]),t._v("调度的最小单位")])])]),t._v(" "),v("p",[t._v("一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫"),v("strong",[t._v("进程")]),t._v("。"),v("strong",[t._v("进程是运行在虚拟内存上的，虚拟内存是用来解决用户对硬件资源的无限需求和有限的硬件资源之间的矛盾的。从操作系统角度来看，虚拟内存即交换文件；从处理器角度看，虚拟内存即虚拟地址空间")])]),t._v(" "),v("p",[t._v("一个标准的线程由线程"),v("code",[t._v("ID")]),t._v("、当前指令指针("),v("code",[t._v("PC")]),t._v(")、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成")]),t._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[t._v("虚拟地址空间")]),t._v(" "),v("p",[t._v("如果程序很多时，内存可能会不够，操作系统为每个进程提供一套独立的虚拟地址空间，从而使得同一块物理内存在不同的进程中可以对应到不同或相同的虚拟地址，变相的增加了程序可以使用的内存。")])]),t._v(" "),v("p",[v("mark",[t._v("进程和线程之间的关系有以下四个特点：")])]),t._v(" "),v("p",[v("strong",[t._v("（1）进程中的任意一线程执行出错，都会导致整个进程的崩溃。")])]),t._v(" "),v("p",[v("strong",[t._v("（2）线程之间共享进程中的数据。")])]),t._v(" "),v("p",[v("strong",[t._v("（3）当一个进程关闭之后，操作系统会回收进程所占用的内存，")]),t._v(" 当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。")]),t._v(" "),v("p",[v("strong",[t._v("（4）进程之间的内容相互隔离。")]),t._v(" 进程隔离就是为了使操作系统中的进程互不干扰，每一个进程只能访问自己占有的数据，也就避免出现"),v("code",[t._v("进程 A")]),t._v(" 写入数据到"),v("code",[t._v("进程 B")]),t._v(" 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信的机制了。")]),t._v(" "),v("p",[v("strong",[t._v("Chrome浏览器的架构图")]),t._v("： "),v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/202112132136210.awebp",alt:"img"}}),t._v(" 从图中可以看出，最新的 "),v("code",[t._v("Chrome")]),t._v(" 浏览器包括：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("1 个浏览器主进程")])]),t._v(" "),v("li",[v("p",[t._v("1 个 "),v("code",[t._v("GPU")]),t._v(" 进程")])]),t._v(" "),v("li",[v("p",[t._v("1 个网络进程")])]),t._v(" "),v("li",[v("p",[t._v("多个渲染进程")])]),t._v(" "),v("li",[v("p",[t._v("多个插件进程")])])]),t._v(" "),v("p",[v("strong",[t._v("这些进程的功能：")])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("浏览器进程")]),t._v("：主要负责界面显示、用户交互、子进程管理，还包括地址栏、书签、后退和前进按钮，同时提供存储，网络请求和文件访问等功能。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("渲染进程")]),t._v("：核心任务是将 "),v("code",[t._v("HTML")]),t._v("、"),v("code",[t._v("CSS")]),t._v(" 和"),v("code",[t._v("JavaScript")]),t._v(" 转换为用户可以与之交互的网页，排版引擎 "),v("code",[t._v("Blink")]),t._v(" 和 "),v("code",[t._v("JavaScript")]),t._v(" 引擎 "),v("code",[t._v("V8")]),t._v(" 都是运行在该进程中，默认情况下，"),v("code",[t._v("Chrome")]),t._v(" 会为每个 "),v("code",[t._v("Tab")]),t._v(" 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),v("li",[v("p",[v("strong",[v("code",[t._v("GPU")]),t._v(" 进程")]),t._v("：其实， "),v("code",[t._v("GPU")]),t._v("的使用初衷是为了实现"),v("code",[t._v("3D CSS")]),t._v(" 的效果，只是随后网页、"),v("code",[t._v("Chrome")]),t._v(" 的 "),v("code",[t._v("UI")]),t._v(" 界面都选择采用 "),v("code",[t._v("GPU")]),t._v(" 来绘制，这使得 "),v("code",[t._v("GPU")]),t._v(" 成为浏览器普遍的需求。最后，"),v("code",[t._v("Chrome")]),t._v(" 在其多进程架构上也引入了 "),v("code",[t._v("GPU")]),t._v(" 进程。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("网络进程")]),t._v("：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("插件进程")]),t._v("：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),t._v(" "),v("p",[t._v("所以，"),v("strong",[t._v("打开一个网页，最少需要四个进程")]),t._v("："),v("strong",[v("mark",[t._v("1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程")])]),t._v("。如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。")]),t._v(" "),v("p",[t._v("虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("更高的资源占用")]),t._v("：因为每个进程都会包含公共基础结构的副本（如 "),v("code",[t._v("JavaScript")]),t._v(" 运行环境），这就意味着浏览器会消耗更多的内存资源。")]),t._v(" "),v("li",[v("strong",[t._v("更复杂的体系架构")]),t._v("：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。")])]),t._v(" "),v("h2",{attrs:{id:"进程和线程的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别"}},[t._v("#")]),t._v(" 进程和线程的区别"),v("badge",{attrs:{text:"特别重要",type:"error"}})],1),t._v(" "),v("ul",[v("li",[v("p",[t._v("进程可以看做独立应用，线程不能")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("资源")]),t._v("："),v("strong",[t._v("进程是"),v("code",[t._v("cpu")]),t._v("资源分配的最小单位")]),t._v("（是能拥有资源和独立运行的最小单位）；"),v("strong",[t._v("线程是"),v("code",[t._v("cpu")]),t._v("调度的最小单位")]),t._v("（线程是建立在进程的基础上的一次程序运行单位，"),v("strong",[t._v("一个进程中可以有多个线程")]),t._v("）。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("通信方面")]),t._v("：线程间可以通过直接共享同一进程中的资源，而进程通信需要借助 进程间通信。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("调度")]),t._v("：线程作为"),v("strong",[t._v("调度和分配")]),t._v("的基本单位，进程作为"),v("strong",[t._v("拥有资源")]),t._v("的基本单位。进程切换比线程切换的开销要大。线程是"),v("code",[t._v("CPU")]),t._v("调度的基本单位，线程的切换不会引起进程切换，但某个进程中的线程切换到另一个进程中的线程时，会引起进程切换。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("系统开销")]),t._v("：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存、"),v("code",[t._v("I/O")]),t._v(" 等，其开销远大于创建或撤销线程时的开销。同理，在进行进程切换时，涉及当前执行进程 "),v("code",[t._v("CPU")]),t._v(" 环境还有各种各样状态的保存及新调度进程状态的设置，而线程切换时只需"),v("strong",[t._v("保存和设置少量寄存器")]),t._v("内容，开销较小。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("并发性")]),t._v("：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；")])])]),t._v(" "),v("h2",{attrs:{id:"浏览器的渲染进程的线程有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染进程的线程有哪些"}},[t._v("#")]),t._v(" 浏览器的渲染进程的线程有哪些"),v("badge",{attrs:{text:"重要",type:"warning"}})],1),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/202112132140170.awebp",alt:"img"}})]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[v("code",[t._v("GUI")]),t._v("渲染线程")]),t._v(" 负责渲染浏览器页面，解析"),v("code",[t._v("html")]),t._v("、"),v("code",[t._v("css")]),t._v("，构建"),v("code",[t._v("dom")]),t._v("树、"),v("code",[t._v("cssom")]),t._v("树、"),v("code",[t._v("render")]),t._v("树和绘制页面，当界面需要重绘或者某些操作引发的回流，该线程就会执行")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("GUI")]),t._v("渲染线程和"),v("code",[t._v("JS")]),t._v("引擎线程是互斥的，当"),v("code",[t._v("JS")]),t._v("引擎执行时"),v("code",[t._v("GUI")]),t._v("线程会被挂起，"),v("code",[t._v("GUI")]),t._v("更新会被保存在一个队列等到"),v("code",[t._v("JS")]),t._v("引擎空闲时候立即被执行")])])]),t._v(" "),v("li",[v("p",[v("strong",[v("code",[t._v("JS")]),t._v("引擎线程")]),t._v(" 也称为"),v("code",[t._v("JS")]),t._v("内核，负责处理"),v("code",[t._v("js")]),t._v("，解析"),v("code",[t._v("js")]),t._v("并运行，"),v("code",[t._v("JS")]),t._v("引擎线程一直等待任务队列中任务的到来，然后处理，一个"),v("code",[t._v("Tab")]),t._v("页中无论什么时候都只有"),v("mark",[t._v("一个"),v("code",[t._v("JS")]),t._v("引擎线程")]),t._v("在运行"),v("code",[t._v("JS")]),t._v("程序")]),t._v(" "),v("ul",[v("li",[t._v("由于"),v("code",[t._v("GUI")]),t._v("和"),v("code",[t._v("js")]),t._v("引擎的互斥，如果"),v("code",[t._v("JS")]),t._v("执行时间过长，会导致页面渲染不连贯，导致页面渲染加载阻塞")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("事件触发线程")]),t._v(" 用来控制事件循环，当"),v("code",[t._v("js")]),t._v("引擎执行到"),v("code",[t._v("setTimeout")]),t._v("(或者鼠标点击，"),v("code",[t._v("ajax")]),t._v("请求)，会将对应任务加入到事件触发线程，当对应的事件符合触发条件的时候，该线程会把事件添加到待处理队尾，等待"),v("code",[t._v("JS")]),t._v("引擎线程处理")]),t._v(" "),v("ul",[v("li",[t._v("由于"),v("code",[t._v("JS")]),t._v("是单线程，所以待处理队列的事件都得排队等待")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("定时器触发线程")]),t._v(" 即"),v("code",[t._v("setInterval")]),t._v("与"),v("code",[t._v("setTimeout")]),t._v("所在线程，浏览器定时计数器并不是由"),v("code",[t._v("js")]),t._v("引擎计数的，因为"),v("code",[t._v("JS")]),t._v("引擎是单线程，如果处于阻塞就会影响计时的准确性，因此使用单独的线程来计时并且触发定时器，到时就添加进事件队列里面，等待"),v("code",[t._v("JS")]),t._v("引擎空闲的时候执行，所以不一定准确，定时器只是将指定时间点的任务添加进事件队列")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("W3C")]),t._v("规定 定时器定时不能小于"),v("code",[t._v("4ms")]),t._v(" 如果小于"),v("code",[t._v("4ms")]),t._v("默认为"),v("code",[t._v("4ms")])])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("异步"),v("code",[t._v("HTTP")]),t._v("请求线程")]),t._v(" "),v("code",[t._v("XMLHttpRequest")]),t._v("连接后通过浏览器新开一个线程请求，当他检测到状态变更的时候如果设有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待"),v("code",[t._v("JS")]),t._v("引擎空闲后执行")])])]),t._v(" "),v("h2",{attrs:{id:"进程之前的通信方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程之前的通信方法"}},[t._v("#")]),t._v(" 进程之前的通信方法"),v("badge",{attrs:{text:"重要",type:"warning"}})],1),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("管道通信")]),t._v(" "),v("p",[t._v("管道是最基本的进程间通信机制，"),v("strong",[t._v("管道是操作系统在内核中开辟的一段缓冲区，进程"),v("code",[t._v("1")]),t._v("可以将需要交互的数据拷贝到缓存区中供进程"),v("code",[t._v("2")]),t._v("读取")])])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("特点")])]),t._v(" "),v("ul",[v("li",[t._v("单向通信")]),t._v(" "),v("li",[t._v("只能血缘关系的进程进行通信")]),t._v(" "),v("li",[t._v("依赖于文件系统")]),t._v(" "),v("li",[t._v("生命周期跟进程一样")]),t._v(" "),v("li",[t._v("面向字节流的服务")]),t._v(" "),v("li",[t._v("管道内部提供同步机制")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("匿名管道和命名管道的区别")]),t._v(" "),v("p",[t._v("匿名管道:管道是半双工的，数据只能单向通信；需要双方通信时，需要建立起两个管道；只能用于父子进程或者兄弟进程之间（具有亲缘关系的进程）。")]),t._v(" "),v("p",[t._v("命名管道：可在同一台计算机的不同进程之间或在跨越一个网络的不同计算机的不同进程之间，支持可靠的、单向或双向的数据通信。")])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("消息队列通信")]),t._v(" "),v("p",[t._v("消息队列就是一个消息的列表。"),v("strong",[t._v("用户可以在消息队列中添加消息、读取消息等。消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法")]),t._v("。 每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个"),v("strong",[t._v("最大长度的限制")]),t._v("。")])]),t._v(" "),v("ul",[v("li",[t._v("使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。")])]),t._v(" "),v("blockquote",[v("p",[t._v("管道通信和消息队列的区别在于：后者少了打开和关闭管道方面的复杂性。但他有和命名管道相同处是每个数据块有一个最大长度的限制，而管道满时的阻塞问题。消息队列的优势在于，它独立于发送和接收进程而存在")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("共享内存通信")]),t._v(" "),v("p",[t._v("共享内存就是"),v("strong",[t._v("映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问")]),t._v("（使多个进程可以访问同一块内存空间）。共享内存是最快的 "),v("code",[t._v("IPC")]),t._v(" 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("信号量通信")]),t._v(" "),v("p",[t._v("共享内存最大的问题就是多进程竞争内存的问题，就像类似于线程安全问题。我们可以使用信号量来解决这个问题。信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是 "),v("code",[t._v("1")]),t._v("，然后 "),v("code",[t._v("a")]),t._v(" 进程来访问内存"),v("code",[t._v("1")]),t._v("的时候，我们就把信号量的值设为 "),v("code",[t._v("0")]),t._v("，然后进程"),v("code",[t._v("b")]),t._v(" 也要来访问内存"),v("code",[t._v("1")]),t._v("的时候，看到信号量的值为 "),v("code",[t._v("0")]),t._v(" 就知道已经有进程在访问内存"),v("code",[t._v("1")]),t._v("了，这个时候进程 "),v("code",[t._v("b")]),t._v(" 就会访问不了内存"),v("code",[t._v("1")]),t._v("。所以说，信号量也是进程之间的一种通信方式。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("套接字通信")]),t._v(" "),v("p",[t._v("上面说的共享内存、管道、信号量、消息队列，他们都是多个进程在一台主机之间的通信，那两个相隔几千里的进程能够进行通信吗？答是必须的，这个时候 "),v("code",[t._v("Socket")]),t._v(" 这家伙就派上用场了，例如我们平时通过浏览器发起一个 "),v("code",[t._v("http")]),t._v(" 请求，然后服务器给你返回对应的数据，这种就是采用 "),v("code",[t._v("Socket")]),t._v(" 的通信方式了。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("信号通信")]),t._v(" "),v("p",[t._v("信号("),v("code",[t._v("Signals")]),t._v(")是"),v("code",[t._v("Unix")]),t._v("系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。")])]),t._v(" "),v("h2",{attrs:{id:"共享内存比管道和消息队列效率高的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#共享内存比管道和消息队列效率高的原因"}},[t._v("#")]),t._v(" 共享内存比管道和消息队列效率高的原因")]),t._v(" "),v("p",[t._v("共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，就如同 "),v("code",[t._v("malloc()")]),t._v(" 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。")]),t._v(" "),v("p",[t._v("访问共享内存区域和访问进程独有的内存区域一样快，并"),v("mark",[v("strong",[t._v("不需要通过系统调用或者其它需要切入内核")])]),t._v("的过程来完成。同时它也避免了对数据的各种不必要的复制。\n因为"),v("mark",[v("strong",[t._v("系统内核没有对访问共享内存进行同步")])]),t._v("，您必须提供自己的同步措施。例如，"),v("mark",[t._v("在数据被写入之前不允许进程从共享内存中读取信息、不允许两个进程同时向同一个共享内存地址写入数据等")]),t._v("。解决这些问题的常用方法是通过使用"),v("mark",[v("strong",[t._v("信号量进行同步")]),t._v("。")])]),t._v(" "),v("p",[t._v("共享内存块"),v("strong",[t._v("提供了在任意数量的进程之间进行高效双向通信的机制")]),t._v("。每个使用者都可以读取写入数据，但是所有程序之间必须达成并遵守一定的协议，以防止诸如在读取信息之前覆写内存空间等竞争状态的出现。")]),t._v(" "),v("h2",{attrs:{id:"僵尸进程和孤儿进程是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程和孤儿进程是什么"}},[t._v("#")]),t._v(" 僵尸进程和孤儿进程是什么")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("孤儿进程")]),t._v("：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被"),v("code",[t._v("init")]),t._v("进程(进程号为"),v("code",[t._v("1")]),t._v(")所收养，并由"),v("code",[t._v("init")]),t._v("进程对它们完成状态收集工作。")]),t._v(" "),v("li",[v("strong",[t._v("僵尸进程")]),t._v("：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。")])]),t._v(" "),v("h2",{attrs:{id:"死锁产生的原因和解决办法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#死锁产生的原因和解决办法"}},[t._v("#")]),t._v(" 死锁产生的原因和解决办法"),v("badge",{attrs:{text:"重要",type:"warning"}})],1),t._v(" "),v("p",[t._v("所谓死锁，是指多个进程在运行过程中因"),v("strong",[t._v("争夺资源")]),t._v("而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。")]),t._v(" "),v("p",[t._v("系统中的资源可以分为两类：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("可剥夺资源")]),t._v("，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，"),v("code",[t._v("CPU")]),t._v("和主存均属于可剥夺性资源；")]),t._v(" "),v("li",[v("strong",[t._v("不可剥夺资源")]),t._v("，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。")])]),t._v(" "),v("p",[v("strong",[t._v("产生死锁的原因：")])]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("竞争资源")])])]),t._v(" "),v("ul",[v("li",[t._v("产生死锁中的竞争资源之一指的是"),v("strong",[t._v("竞争不可剥夺资源")]),t._v("（例如：系统中只有一台打印机，可供进程"),v("code",[t._v("P1")]),t._v("使用，假定"),v("code",[t._v("P1")]),t._v("已占用了打印机，若"),v("code",[t._v("P2")]),t._v("继续要求打印机打印将阻塞）")]),t._v(" "),v("li",[t._v("产生死锁中的竞争资源另外一种资源指的是"),v("strong",[t._v("竞争临时资源")]),t._v("（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("strong",[t._v("进程间推进顺序非法")])])]),t._v(" "),v("p",[t._v("若"),v("code",[t._v("P1")]),t._v("保持了资源"),v("code",[t._v("R1")]),t._v("，"),v("code",[t._v("P2")]),t._v("保持了资源"),v("code",[t._v("R2")]),t._v("，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当"),v("code",[t._v("P1")]),t._v("运行到"),v("code",[t._v("P1：Request（R2）")]),t._v("时，将因"),v("code",[t._v("R2")]),t._v("已被"),v("code",[t._v("P2")]),t._v("占用而阻塞；当"),v("code",[t._v("P2")]),t._v("运行到"),v("code",[t._v("P2：Request（R1）")]),t._v("时，也将因"),v("code",[t._v("R1")]),t._v("已被"),v("code",[t._v("P1")]),t._v("占用而阻塞，于是发生进程死锁")]),t._v(" "),v("p",[v("strong",[t._v("产生死锁的必要条件：")])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("互斥条件")]),t._v("：进程要求对所分配的资源进行排它性控制，即"),v("strong",[t._v("在一段时间内某资源仅为一进程所占用")]),t._v("。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("占有且等待条件")]),t._v("：当进程因请求资源而阻塞时，对已获得的资源保持不放。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("非抢占条件")]),t._v("：不能强行抢占进程中已占有的资源，只能在使用完时由自己释放。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("循环等待条件")]),t._v("：存在一个封闭的进程链，使得每个资源至少占有此链中下一个进程所需要的一个资源。")])])]),t._v(" "),v("p",[v("strong",[v("mark",[t._v("预防死锁的方法：")])])]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("资源一次性分配")]),t._v(" ：一次性分配所有资源，这样就不会再有请求了（破坏请求条件）")])]),t._v(" "),v("li",[v("p",[t._v("只要有一个资源得不到分配，也不给这个进程分配其他的资源（破坏占有且等待条件）")])]),t._v(" "),v("li",[v("p",[t._v("可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏非抢占条件）")])]),t._v(" "),v("li",[v("p",[t._v("资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏循环等待条件）")])])]),t._v(" "),v("h2",{attrs:{id:"如何实现浏览器多个标签页之间的通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何实现浏览器多个标签页之间的通信"}},[t._v("#")]),t._v(" 如何实现浏览器多个标签页之间的通信")]),t._v(" "),v("p",[t._v("实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("使用 "),v("code",[t._v("websocket")]),t._v(" 协议")]),t._v("，因为 "),v("code",[t._v("websocket")]),t._v(" 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("使用 "),v("code",[t._v("ShareWorker")]),t._v(" 的方式")]),t._v("，"),v("code",[t._v("shareWorker")]),t._v(" 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("使用 "),v("code",[t._v("localStorage")]),t._v(" 的方式")]),t._v("，我们可以在一个标签页对 "),v("code",[t._v("localStorage")]),t._v(" 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 "),v("code",[t._v("localStorage")]),t._v(" 对象就是充当的中介者的角色。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("使用 "),v("code",[t._v("postMessage")]),t._v(" 方法")]),t._v("，如果我们能够获得对应标签页的引用，就可以使用"),v("code",[t._v("postMessage")]),t._v(" 方法，进行通信。")])])]),t._v(" "),v("h2",{attrs:{id:"对service-worker的理解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#对service-worker的理解"}},[t._v("#")]),t._v(" 对"),v("code",[t._v("service Worker")]),t._v("的理解")]),t._v(" "),v("p",[v("code",[t._v("Service Worker")]),t._v(" 是运行在浏览器背后的"),v("strong",[t._v("独立线程")]),t._v("，一般可以用来实现缓存功能。使用 "),v("code",[t._v("Service Worker")]),t._v("的话，传输协议必须为 "),v("strong",[v("code",[t._v("HTTPS")])]),t._v("。因为 "),v("code",[t._v("Service Worker")]),t._v(" 中涉及到请求拦截，所以必须使用"),v("code",[t._v("HTTPS")]),t._v(" 协议来保障安全。")]),t._v(" "),v("p",[v("code",[t._v("Service Worker")]),t._v(" 实现缓存功能一般分为三个步骤：首先需要先注册 "),v("code",[t._v("Service Worker")]),t._v("，然后监听到 "),v("code",[t._v("install")]),t._v(" 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：")]),t._v(" "),v("div",{staticClass:"language-javascript line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("navigator"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  navigator"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sw.js'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("registration")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'service worker 注册成功'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'servcie worker 注册失败'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sw.js")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 `install` 事件，回调中缓存所需文件")]),t._v("\nself"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'install'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  e"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("waitUntil")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-cache'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./index.html'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./index.js'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拦截所有请求事件")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据")]),t._v("\nself"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  e"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("respondWith")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    caches"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" response\n      "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch source'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br"),v("span",{staticClass:"line-number"},[t._v("15")]),v("br"),v("span",{staticClass:"line-number"},[t._v("16")]),v("br"),v("span",{staticClass:"line-number"},[t._v("17")]),v("br"),v("span",{staticClass:"line-number"},[t._v("18")]),v("br"),v("span",{staticClass:"line-number"},[t._v("19")]),v("br"),v("span",{staticClass:"line-number"},[t._v("20")]),v("br"),v("span",{staticClass:"line-number"},[t._v("21")]),v("br"),v("span",{staticClass:"line-number"},[t._v("22")]),v("br"),v("span",{staticClass:"line-number"},[t._v("23")]),v("br"),v("span",{staticClass:"line-number"},[t._v("24")]),v("br"),v("span",{staticClass:"line-number"},[t._v("25")]),v("br"),v("span",{staticClass:"line-number"},[t._v("26")]),v("br"),v("span",{staticClass:"line-number"},[t._v("27")]),v("br"),v("span",{staticClass:"line-number"},[t._v("28")]),v("br"),v("span",{staticClass:"line-number"},[t._v("29")]),v("br"),v("span",{staticClass:"line-number"},[t._v("30")]),v("br"),v("span",{staticClass:"line-number"},[t._v("31")]),v("br"),v("span",{staticClass:"line-number"},[t._v("32")]),v("br")])]),v("p",[t._v("打开页面，可以在开发者工具中的 "),v("code",[t._v("Application")]),t._v(" 看到 "),v("code",[t._v("Service Worker")]),t._v(" 已经启动了： "),v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/202112140921510.awebp",alt:"img"}}),t._v(" 在 "),v("code",[t._v("Cache")]),t._v(" 中也可以发现所需的文件已被缓存： "),v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/202112140922615.awebp",alt:"img"}})])])}),[],!1,null,null,null);s.default=a.exports}}]);