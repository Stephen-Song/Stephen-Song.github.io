(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{468:function(t,s,e){"use strict";e.r(s);var n=e(26),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),e("h2",{attrs:{id:"介绍一下websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下websocket"}},[t._v("#")]),t._v(" 介绍一下"),e("code",[t._v("websocket")])]),t._v(" "),e("div",{staticClass:"custom-block theorem"},[e("p",{staticClass:"title"},[t._v("概念")]),e("p",[e("code",[t._v("WebSocket")]),t._v("是"),e("code",[t._v("HTML5")]),t._v("提供的一种浏览器与服务器进行"),e("strong",[t._v("全双工通讯")]),t._v("的网络技术，属于应用层协议。它基于"),e("code",[t._v("TCP")]),t._v("传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。")]),t._v(" "),e("p",[e("code",[t._v("WebSocket")]),t._v(" 的出现就解决了半双工通信的弊端。它最大的特点是："),e("strong",[t._v("服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。")])])]),e("p",[e("strong",[e("code",[t._v("WebSocket")]),t._v("原理")]),t._v("：客户端向 "),e("code",[t._v("WebSocket")]),t._v(" 服务器通知（"),e("code",[t._v("notify")]),t._v("）一个带有所有接收者"),e("code",[t._v("ID")]),t._v("（"),e("code",[t._v("recipients IDs")]),t._v("）的事件（"),e("code",[t._v("event")]),t._v("），服务器接收后立即通知所有活跃的（"),e("code",[t._v("active")]),t._v("）客户端，只有"),e("code",[t._v("ID")]),t._v("在接收者"),e("code",[t._v("ID")]),t._v("序列中的客户端才会处理这个事件。")]),t._v(" "),e("p",[e("strong",[e("code",[t._v("WebSocket")]),t._v(" 特点的如下：")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("支持双向通信，实时性更强")])]),t._v(" "),e("li",[e("p",[t._v("可以发送文本，也可以发送二进制数据")])]),t._v(" "),e("li",[e("p",[t._v("建立在"),e("code",[t._v("TCP")]),t._v("协议之上，服务端的实现比较容易")])]),t._v(" "),e("li",[e("p",[t._v("数据格式比较轻量，性能开销小，通信高效")])]),t._v(" "),e("li",[e("p",[t._v("没有同源限制，客户端可以与任意服务器通信")])]),t._v(" "),e("li",[e("p",[t._v("协议标识符是"),e("code",[t._v("ws")]),t._v("（如果加密，则为"),e("code",[t._v("wss")]),t._v("），服务器网址就是 "),e("code",[t._v("URL")])])]),t._v(" "),e("li",[e("p",[t._v("与 "),e("code",[t._v("HTTP")]),t._v(" 协议有着良好的兼容性。默认端口也是"),e("code",[t._v("80")]),t._v("和"),e("code",[t._v("443")]),t._v("，并且握手阶段采用 "),e("code",[t._v("HTTP")]),t._v(" 协议，因此握手时不容易屏蔽，能通过各种 "),e("code",[t._v("HTTP")]),t._v(" 代理服务器。")])])]),t._v(" "),e("p",[e("strong",[e("code",[t._v("Websocket")]),t._v("的使用方法如下：")])]),t._v(" "),e("p",[t._v("在客户端中：")]),t._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在index.html中直接写WebSocket，设置服务端的端口号为 9999")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ws "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws://localhost:9999'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在客户端与服务端建立连接后触发")]),t._v("\nws"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection open."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    ws"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在服务端给客户端发来消息的时候触发")]),t._v("\nws"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印的是MessageEvent对象")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印的是收到的消息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在客户端与服务端建立关闭后触发")]),t._v("\nws"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection closed."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("h3",{attrs:{id:"即时通讯的实现-短轮询、长轮询、sse-和-websocket-间的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#即时通讯的实现-短轮询、长轮询、sse-和-websocket-间的区别"}},[t._v("#")]),t._v(" 即时通讯的实现：短轮询、长轮询、"),e("code",[t._v("SSE")]),t._v(" 和 "),e("code",[t._v("WebSocket")]),t._v(" 间的区别？")]),t._v(" "),e("p",[t._v("短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。")]),t._v(" "),e("p",[e("strong",[t._v("短轮询的基本思路：")]),t._v(" 浏览器每隔一段时间向浏览器发送 "),e("code",[t._v("http")]),t._v(" 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。")]),t._v(" "),e("p",[t._v("缺点是这种方式由于需要不断的建立 "),e("code",[t._v("http")]),t._v(" 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。")]),t._v(" "),e("p",[e("strong",[t._v("长轮询的基本思路：")]),t._v(" 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 "),e("code",[t._v("JavaScript")]),t._v(" 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 "),e("code",[t._v("http")]),t._v(" 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。")]),t._v(" "),e("p",[e("strong",[e("code",[t._v("SSE")]),t._v(" 的基本思想：")]),t._v(" 服务器使用"),e("strong",[t._v("流信息")]),t._v("向服务器推送信息。严格地说，"),e("code",[t._v("http")]),t._v(" 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个"),e("strong",[t._v("数据流")]),t._v("，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。"),e("code",[t._v("SSE")]),t._v(" 就是利用这种机制，使用流信息向浏览器推送信息。它基于 "),e("code",[t._v("http")]),t._v(" 协议，目前除了 "),e("code",[t._v("IE/Edge")]),t._v("，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 "),e("code",[t._v("http")]),t._v(" 请求，相比之下节约了资源。")]),t._v(" "),e("p",[e("strong",[e("code",[t._v("WebSocket")])]),t._v(" 是 "),e("code",[t._v("HTML5")]),t._v(" 定义的一个新协议，与传统的 "),e("code",[t._v("http")]),t._v(" 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 "),e("code",[t._v("WebSocket")]),t._v(" 协议的缺点是在服务器端的配置比较复杂。"),e("code",[t._v("WebSocket")]),t._v(" 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 "),e("code",[t._v("SSE")]),t._v(" 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 "),e("code",[t._v("http")]),t._v(" 请求了。")]),t._v(" "),e("p",[e("strong",[t._v("上面的四个通信协议，前三个都是基于"),e("code",[t._v("HTTP")]),t._v("协议的。")])]),t._v(" "),e("p",[t._v("对于这四种即使通信协议，从性能的角度来看： "),e("strong",[e("code",[t._v("WebSocket")]),t._v(" > 长连接（"),e("code",[t._v("SEE")]),t._v("） > 长轮询 > 短轮询")]),t._v(" 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： "),e("strong",[t._v("短轮询 > 长轮询 > 长连接（"),e("code",[t._v("SEE")]),t._v("） > "),e("code",[t._v("WebSocket")])]),t._v(" 所以，还是要根据具体的使用场景来判断使用哪种方式。")]),t._v(" "),e("h2",{attrs:{id:"http的header怎么判断协议是不是websocket"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http的header怎么判断协议是不是websocket"}},[t._v("#")]),t._v(" "),e("code",[t._v("http")]),t._v("的"),e("code",[t._v("header")]),t._v("怎么判断协议是不是"),e("code",[t._v("webSocket")])]),t._v(" "),e("p",[e("code",[t._v("WebSocket")]),t._v(" 使用 "),e("code",[t._v("ws")]),t._v(" 或 "),e("code",[t._v("wss")]),t._v(" 的统一资源标志符，通过判断 "),e("code",[t._v("header")]),t._v(" 中是否包含 "),e("code",[t._v("Connection: Upgrade")]),t._v(" 与 "),e("code",[t._v("Upgrade: websocket")]),t._v(" 来判断当前是否需要升级到 "),e("code",[t._v("websocket")]),t._v(" 协议，除此之外，它还包含 "),e("code",[t._v("Sec-WebSocket-Key")]),t._v(" 、 "),e("code",[t._v("Sec-WebSocket-Version")]),t._v(" 等"),e("code",[t._v("header")]),t._v("，当服务器同意 "),e("code",[t._v("WebSocket")]),t._v(" 连接时，返回响应码 "),e("code",[t._v("101")])])])}),[],!1,null,null,null);s.default=a.exports}}]);