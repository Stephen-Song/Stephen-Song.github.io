(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{451:function(s,t,a){"use strict";a.r(t);var e=a(26),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"介绍一下js的数据类型和区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下js的数据类型和区别"}},[s._v("#")]),s._v(" 介绍一下"),a("code",[s._v("js")]),s._v("的数据类型和区别"),a("badge",{attrs:{text:"特别重要",type:"error"}})],1),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/202201051627497.png",alt:""}})]),s._v(" "),a("p",[s._v("七种基本数据类型："),a("code",[s._v("undefined")]),s._v(" "),a("code",[s._v("null")]),s._v(" "),a("code",[s._v("string")]),s._v(" "),a("code",[s._v("number")]),s._v(" "),a("code",[s._v("bigInt")]),s._v(" "),a("code",[s._v("boolean")]),s._v(" "),a("code",[s._v("symbol")])]),s._v(" "),a("p",[s._v("一种引用数据类型："),a("code",[s._v("object")]),s._v(" （包含普通对象-"),a("code",[s._v("Object")]),s._v("，数组对象-"),a("code",[s._v("Array")]),s._v("，正则对象-"),a("code",[s._v("RegExp")]),s._v("，日期对象-"),a("code",[s._v("Date")]),s._v("，数学函数-"),a("code",[s._v("Math")]),s._v("，函数对象-"),a("code",[s._v("Function")]),s._v("）")]),s._v(" "),a("p",[s._v("其中"),a("code",[s._v("es6")]),s._v("新增的是"),a("code",[s._v("symbol")]),s._v("和"),a("code",[s._v("bigint")])]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("symbol")]),s._v("代表创建后独一无二不可变的数据类型 为了解决可能出现的全局变量冲突")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("bigint")]),s._v("是一种数字类型的数据 可以表示任何精度格式的整数，可以安全存储操作大整数，可以超过"),a("code",[s._v("number")]),s._v("能够表示的安全整数范围")])])]),s._v(" "),a("p",[a("strong",[s._v("他们分别存放在")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("栈：原始数据类型("),a("code",[s._v("undefined")]),s._v(" "),a("code",[s._v("null")]),s._v(" "),a("code",[s._v("boolean")]),s._v(" "),a("code",[s._v("number")]),s._v(" "),a("code",[s._v("string")]),s._v(")")]),s._v(" "),a("ul",[a("li",[s._v("占据空间少 大小固定 属于频繁被使用数据 所以放在栈中")]),s._v(" "),a("li",[s._v("栈区内存由编译器自动分配释放 存放函数的参考值 局部变量的值")])])]),s._v(" "),a("li",[a("p",[s._v("堆：引用数据类型（"),a("code",[s._v("object")]),s._v(" "),a("code",[s._v("array")]),s._v(" "),a("code",[s._v("function")]),s._v("）")]),s._v(" "),a("ul",[a("li",[s._v("占据空间大 大小不固定 引用数据在栈中存储了指针指向堆中实体的起始地址")]),s._v(" "),a("li",[s._v("由开发者分配释放 若开发者不释放程序结束时由"),a("mark",[a("RouterLink",{attrs:{to:"/pages/4a6f6a/#浏览器的垃圾回收机制"}},[s._v("垃圾回收机制回收")])],1)])])]),s._v(" "),a("li",[a("p",[s._v("堆："),a("code",[s._v("JavaScript")]),s._v("的闭包")]),s._v(" "),a("ul",[a("li",[s._v("在编译过程中，如果 "),a("code",[s._v("JavaScript")]),s._v(" 引擎判断到一个闭包，会在堆空间创建换一个"),a("code",[s._v("“closure(fn)”")]),s._v("的对象（这是一个内部对象，"),a("code",[s._v("JavaScript")]),s._v(" 是无法访问的），用来保存闭包中的变量")])])])]),s._v(" "),a("h2",{attrs:{id:"数据检测方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据检测方法有哪些"}},[s._v("#")]),s._v(" 数据检测方法有哪些"),a("badge",{attrs:{text:"特别重要",type:"error"}})],1),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("typeof")])])]),s._v(" "),a("p",[s._v("其他解析都正确 除了数组 对象 "),a("code",[s._v("null")]),s._v(" "),a("code",[s._v("Regexp")]),s._v(" "),a("code",[s._v("Date")]),s._v("会被判断成"),a("code",[s._v("object")])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("值得注意的是")]),s._v(" "),a("p",[a("code",[s._v("typeof function() {} === 'function'")])])]),s._v(" "),a("p",[a("strong",[a("mark",[s._v("为什么"),a("code",[s._v("null")]),s._v("会被解析成"),a("code",[s._v("object")]),s._v("呢")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("原因")]),s._v(" "),a("p",[s._v("在最初的"),a("code",[s._v("js")]),s._v("是"),a("code",[s._v("32")]),s._v("位操作系统，所有值都存储在"),a("code",[s._v("32")]),s._v("位的单元里，每个单元包含一个小的类型标签"),a("code",[s._v("(0-3bit)")]),s._v("以及当前要存储值的真实数据，类型标签存储在每个单元的低位")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("000")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" object   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当前存储的数据指向一个对象。\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" int      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当前存储的数据是一个 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" 位的有符号整数。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("010")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" double   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当前存储的数据指向一个双精度的浮点数。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当前存储的数据指向一个字符串。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" boolean  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 当前存储的数据是布尔值。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("对象的标签值为"),a("code",[s._v("000")]),s._v("，而"),a("code",[s._v("null")]),s._v("则是空指针全是"),a("code",[s._v("0")]),s._v("，所以"),a("code",[s._v("typeof")]),s._v(" "),a("code",[s._v("null")]),s._v(" 是"),a("code",[s._v("object")])]),s._v(" "),a("p",[a("strong",[s._v("对象被赋值了"),a("code",[s._v("null")]),s._v(" 以后，对象对应的堆内存中的值就是游离状态了，"),a("code",[s._v("GC")]),s._v(" 会择机回收该值并释放内存。")]),s._v(" 因此，需要释放某个对象，就将变量设置为 "),a("code",[s._v("null")]),s._v("，即表示该对象已经被清空，目前无效状态")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("instanceof")]),s._v(" 可以判断对象的类型，内部机制是在其原型链上是否找到该类型的原型")])]),s._v(" "),a("p",[a("strong",[s._v("只能正确判断引用类型 不能判断基本数据类型")])]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("引申：")]),s._v(" "),a("p",[s._v("可以判断一个对象在其原型链上是否存在一个构造函数的"),a("code",[s._v("prototype")]),s._v("属性")])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("值得注意的是")]),s._v(" "),a("p",[s._v("将数字转成包装类型")]),s._v(" "),a("p",[a("code",[s._v("let a = new Number(12)")])]),s._v(" "),a("p",[a("code",[s._v("a instanceof Number // true")])]),s._v(" "),a("p",[s._v("此外")]),s._v(" "),a("p",[a("code",[s._v("undefined instanceof undefined")]),s._v("和 "),a("code",[s._v("null instanceof null")]),s._v("会报错")]),s._v(" "),a("p",[a("code",[s._v("Uncaught TypeError: Right-hand side of 'instanceof' is not an object")])])]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("constructor")])])]),s._v(" "),a("p",[s._v("都能判断出来,其作用一是"),a("mark",[s._v("判断数据类型")])]),s._v(" "),a("p",[s._v("二是"),a("mark",[s._v("对象实例通过"),a("code",[s._v("constructor")]),s._v("对象访问他的构造函数")]),s._v("，如果创建一个对象来改变他的原型 "),a("code",[s._v("constructor")]),s._v("就不能判断他的数据类型了")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("Object.prototype.toString.call()")])])]),s._v(" "),a("h2",{attrs:{id:"为什么object-tosting和object-prototype-tostring-call-返回的结果不一样呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么object-tosting和object-prototype-tostring-call-返回的结果不一样呢"}},[s._v("#")]),s._v(" 为什么"),a("code",[s._v("Object.toSting")]),s._v("和"),a("code",[s._v("Object.prototype.toString.call()")]),s._v("返回的结果不一样呢")]),s._v(" "),a("p",[s._v("因为"),a("code",[s._v("toString")]),s._v("是"),a("code",[s._v("object")]),s._v("的原型方法，而"),a("code",[s._v("array")]),s._v(" "),a("code",[s._v("function")]),s._v(" 作为"),a("code",[s._v("object")]),s._v("的实例，重写了"),a("code",[s._v("toString")]),s._v("方法（"),a("code",[s._v("function")]),s._v("返回内容为函数体的字符串 "),a("code",[s._v("array")]),s._v("返回的是元素促成的字符串），若想得到对象的具体类型 应该调用"),a("code",[s._v("object")]),s._v("原型上的"),a("code",[s._v("toString")])]),s._v(" "),a("h2",{attrs:{id:"判断数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组的方法"}},[s._v("#")]),s._v(" 判断数组的方法"),a("badge",{attrs:{text:"特别重要",type:"error"}})],1),s._v(" "),a("ol",[a("li",[s._v("通过"),a("code",[s._v("Object.prototype.toString.call()")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Array'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("通过原型链判断")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("es6")]),s._v("的"),a("code",[s._v("isArray")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("通过"),a("code",[s._v("instanceof")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("instanceof "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("通过"),a("code",[s._v("Array.prototype.isPrototypeOf")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"null和undefined的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined的区别"}},[s._v("#")]),s._v(" "),a("code",[s._v("null")]),s._v("和"),a("code",[s._v("undefined")]),s._v("的区别"),a("badge",{attrs:{text:"特别重要",type:"error"}})],1),s._v(" "),a("ul",[a("li",[a("p",[s._v("都是基本数据类型")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("undefined")]),s._v("代表未定义 "),a("code",[s._v("null")]),s._v("代表空对象，一般变量声明还没赋值或一个函数没有返回值是"),a("code",[s._v("undefined")]),s._v("，"),a("code",[s._v("null")]),s._v("主要是赋值给一些可能返回对象的变量作为初始化")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("undefined")]),s._v("在"),a("code",[s._v("js")]),s._v("中不是一个保留字 可以作为变量名 哈哈哈但是会影响对"),a("code",[s._v("undefined")]),s._v("值的判断 可以通过"),a("code",[s._v("void 0")]),s._v("来获得安全的"),a("code",[s._v("undefined")]),s._v("值")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("undefined == undefined")]),s._v(" "),a("code",[s._v("undefined === undefined")]),s._v(" "),a("code",[s._v("null === null")]),s._v(" "),a("code",[s._v("null == null")])])]),s._v(" "),a("li",[a("p",[s._v("在验证"),a("code",[s._v("null")]),s._v("时，一定要使用　"),a("code",[s._v("===")]),s._v(" ，因为 "),a("code",[s._v("==")]),s._v("无法分别"),a("code",[s._v("null")]),s._v(" 和　"),a("code",[s._v("undefined")])])])]),s._v(" "),a("h2",{attrs:{id:"实现一个instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个instanceof"}},[s._v("#")]),s._v(" 实现一个"),a("code",[s._v("instanceof")])]),s._v(" "),a("p",[s._v("原理"),a("mark",[s._v("是判断构造函数的"),a("code",[s._v("prototype")]),s._v("是否出现在对象的原型链上")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("myInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取对象的原型")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断构造函数的prototype对象是否在对象的原型链上")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没找到就继续在其原型链向上找")]),s._v("\n    proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"为什么0-1-0-2-0-3-如何让他相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么0-1-0-2-0-3-如何让他相等"}},[s._v("#")]),s._v(" 为什么"),a("code",[s._v("0.1 + 0.2 !== 0.3")]),s._v(" 如何让他相等"),a("badge",{attrs:{text:"特别重要",type:"error"}})],1),s._v(" "),a("p",[s._v("先解决如何让其相等")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("(0.1 + 0.2).tofixed(2)")])]),s._v(" "),a("li",[a("code",[s._v("(0.1 * 10 + 0.2 * 10) / 10")])])]),s._v(" "),a("p",[s._v("因为计算机是通过二进制的形式存储数据 "),a("code",[s._v("0.1")]),s._v("的二进制是"),a("code",[s._v("0.000 1100 1100...(1100循环)")]),s._v(" "),a("code",[s._v("0.2")]),s._v("的二进制是"),a("code",[s._v("0.00 1100 1100...（1100循环）")]),s._v("，"),a("code",[s._v("js")]),s._v("遵循"),a("code",[s._v("IEEE 754")]),s._v("标准，使用"),a("code",[s._v("64")]),s._v("位固定长度表示（标准的双精度浮点数）,最多保留"),a("code",[s._v("52")]),s._v("位，加上前面的个位 就是保留"),a("code",[s._v("53")]),s._v("位有效数字，剩余的舍去 那么"),a("code",[s._v("0.1 + 0.2")]),s._v("相加再转换成十进制就是 "),a("strong",[a("code",[s._v("0.30000000000000004")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/duochizhacai/generatePic/img/0cb225cf71d748a8b2d6a5615e402711_tplv-k3u1fbpfcp-watermark.webp",alt:"img"}})]),s._v(" "),a("ul",[a("li",[s._v("第一部分（蓝色）：用来存储符号位"),a("code",[s._v("(sign)")]),s._v("，用来区分正负数，"),a("code",[s._v("0")]),s._v("表示正数，占用"),a("code",[s._v("1")]),s._v("位")]),s._v(" "),a("li",[s._v("第二部分（绿色）：用来存储指数"),a("code",[s._v("(exponent)")]),s._v("，占用"),a("code",[s._v("11")]),s._v("位")]),s._v(" "),a("li",[s._v("第三部分（红色）：用来存储小数"),a("code",[s._v("(fraction)")]),s._v("，占用"),a("code",[s._v("52")]),s._v("位")])]),s._v(" "),a("h2",{attrs:{id:"_1-2-3-map-parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-map-parseint"}},[s._v("#")]),s._v(" "),a("code",[s._v('["1", "2", "3"].map(parseInt)')]),s._v("？"),a("badge",{attrs:{text:"重要",type:"warning"}})],1),s._v(" "),a("p",[a("code",[s._v("[1, NaN, NaN]")]),s._v("因为 "),a("code",[s._v("parseInt")]),s._v(" 需要两个参数 "),a("code",[s._v("(val, radix)")]),s._v("，其中"),a("code",[s._v("radix")]),s._v(" 表示解析时用的基数")]),s._v(" "),a("p",[s._v("下面我们来分析一下"),a("code",[s._v("['1', '2', '3'].map(parseInt)")]),s._v(";")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. parseInt('1', 0); // radix为0时，使用默认的10进制。\n2. parseInt('2', 1); // radix值在2-36，无法解析，返回NaN\n3. parseInt('3', 2); // 基数为2，2进制数表示的数中，最大值小于3，无法解析，返回NaN\nparseInt('111', 2) // 7\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"typeof-nan是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-nan是什么"}},[s._v("#")]),s._v(" "),a("code",[s._v("typeof NaN")]),s._v("是什么")]),s._v(" "),a("p",[a("code",[s._v("NaN")]),s._v("不是一个数字，"),a("code",[s._v("NaN")]),s._v("是一个警戒值（"),a("code",[s._v("sentinel value")]),s._v(" 有特殊用途的常规值）用于指出数字类型的错误情况")]),s._v(" "),a("p",[a("code",[s._v("typeof NaN")]),s._v("是"),a("code",[s._v("number")])]),s._v(" "),a("p",[a("code",[s._v("NaN")]),s._v("是唯一一个非自反的值 "),a("code",[s._v("NaN !== NaN")]),s._v("为"),a("code",[s._v("true")])]),s._v(" "),a("h2",{attrs:{id:"isnan和number-isnan函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnan和number-isnan函数的区别"}},[s._v("#")]),s._v(" "),a("code",[s._v("isNaN")]),s._v("和"),a("code",[s._v("Number.isNaN")]),s._v("函数的区别")]),s._v(" "),a("ul",[a("li",[s._v("函数"),a("code",[s._v("isNaN")]),s._v("会尝试将参数转换为数值 任何不能转化为数值的都返回"),a("code",[s._v("true")])]),s._v(" "),a("li",[a("code",[s._v("Number.isNaN")]),s._v("先会判断传入参数是否为数字，如果是数字会判断是不是"),a("code",[s._v("NaN")]),s._v("不会进行数据类型转换")])]),s._v(" "),a("h2",{attrs:{id:"的强制类型转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#的强制类型转换规则"}},[s._v("#")]),s._v(" "),a("code",[s._v("==")]),s._v("的强制类型转换规则")]),s._v(" "),a("p",[a("mark",[s._v("如果类型不一样 会进行类型转换")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("首先判断类型是否相同 相同则直接比较")])]),s._v(" "),a("li",[a("p",[s._v("不相同就进行类型转换")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("会对比是不是"),a("code",[s._v("null")]),s._v("和"),a("code",[s._v("undefined")]),s._v(" 是的话返回"),a("code",[s._v("true")])])]),s._v(" "),a("li",[a("p",[s._v("判断两者是不是"),a("code",[s._v("string")]),s._v("和"),a("code",[s._v("number")]),s._v("是的话字符串转换为"),a("code",[s._v("number")])])])])]),s._v(" "),a("li",[a("p",[s._v("判断两者是不是"),a("code",[s._v("boolean")]),s._v("和"),a("code",[s._v("number")]),s._v("是的话将"),a("code",[s._v("boolean")]),s._v("转换为"),a("code",[s._v("number")])]),s._v(" "),a("ul",[a("li",[s._v("判断两者一方是不是"),a("code",[s._v("Object")]),s._v("另一方为"),a("code",[s._v("string")]),s._v(" "),a("code",[s._v("number")]),s._v(" "),a("code",[s._v("symbol")]),s._v("的一种 是的话将"),a("code",[s._v("object")]),s._v("转为原始类型在判断")])])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n             ↓\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[object Object]'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"其他值是怎么转字符串的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他值是怎么转字符串的"}},[s._v("#")]),s._v(" 其他值是怎么转字符串的")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("null")]),s._v("和"),a("code",[s._v("undefined")]),s._v(" "),a("code",[s._v("boolean")]),s._v("直接转")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("null -> 'null'")]),s._v(" "),a("code",[s._v("undefined -> 'undefined'")]),s._v(" "),a("code",[s._v("false -> 'false'")]),s._v(" "),a("code",[s._v("true -> 'true'")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("number")]),s._v("类型的直接转换 不过那些极小极大的会使用指数")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("symbol")]),s._v("直接转换，但只允许显式强制类型转换 使用隐式会出错")])]),s._v(" "),a("li",[a("p",[s._v("对普通对象来说 除非自行定义的"),a("code",[s._v("tostring")]),s._v(" 否则会调用"),a("code",[s._v("Object.prototype.toString()")])])])]),s._v(" "),a("h2",{attrs:{id:"其他值转number的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他值转number的规则"}},[s._v("#")]),s._v(" 其他值转"),a("code",[s._v("number")]),s._v("的规则")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("undefined")]),s._v(" 转为 "),a("code",[s._v("NaN")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("null")]),s._v("转为"),a("code",[s._v("0")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("boolean")]),s._v("中"),a("code",[s._v("true")]),s._v("转为"),a("code",[s._v("1")]),s._v(" "),a("code",[s._v("false")]),s._v("转为"),a("code",[s._v("0")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("string")]),s._v("的话先隐式转换(相当于调"),a("code",[s._v("Number()")]),s._v(") 如果包含非数字值的转换为"),a("code",[s._v("NaN")]),s._v(" 空字符串为"),a("code",[s._v("0")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("symbol")]),s._v("不能转换为数字")])]),s._v(" "),a("li",[a("p",[s._v("对象(包括数组)会首先被转换为相应"),a("mark",[s._v("基本类型的值")]),s._v(" 如果返回非数字的基本类型值，再遵循上面的规则强制转换为数字")])]),s._v(" "),a("li",[a("p",[s._v("转换为相应基本类型的值的意思是 通过内部操作"),a("code",[s._v("DefaultValue")]),s._v("检查是否有"),a("code",[s._v("valueOf()")]),s._v("方法，如果有就返回基本类型值进行转换为"),a("code",[s._v("number")]),s._v(" 没有就使用"),a("code",[s._v("toString")]),s._v("的返回值来...")])]),s._v(" "),a("li",[a("p",[s._v("如果都没有 就报"),a("code",[s._v("TypeError")])])])]),s._v(" "),a("h2",{attrs:{id:"其他值转boolean的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他值转boolean的规则"}},[s._v("#")]),s._v(" 其他值转"),a("code",[s._v("Boolean")]),s._v("的规则")]),s._v(" "),a("p",[a("code",[s._v("undefined")]),s._v(" "),a("code",[s._v("null")]),s._v(" "),a("code",[s._v("false")]),s._v(" "),a("code",[s._v("+0")]),s._v(" "),a("code",[s._v("-0")]),s._v(" "),a("code",[s._v("NaN")]),s._v("都是"),a("code",[s._v("false")])]),s._v(" "),a("p",[s._v("其他都为"),a("code",[s._v("true")])]),s._v(" "),a("h2",{attrs:{id:"object-is-和-和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-is-和-和-的区别"}},[s._v("#")]),s._v(" "),a("code",[s._v("Object.is()")]),s._v("和 "),a("code",[s._v("==")]),s._v("和 "),a("code",[s._v("===")]),s._v("的区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("使用双等会进行数据类型的转换")])]),s._v(" "),a("li",[a("p",[s._v("使用三等不会进行数据类型的转换 更为严格")])]),s._v(" "),a("li",[a("p",[s._v("使用"),a("code",[s._v("Object.is()")]),s._v("大致和三等差不多  主要还是解决一些特殊情况例如"),a("code",[s._v("Object.is(+0, -0)")]),s._v(" 是"),a("code",[s._v("false")]),s._v("； "),a("code",[s._v("Object.is(NaN, NaN)")]),s._v("是"),a("code",[s._v("true")]),s._v("的问题")])])]),s._v(" "),a("h2",{attrs:{id:"什么是js的包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是js的包装类型"}},[s._v("#")]),s._v(" 什么是"),a("code",[s._v("js")]),s._v("的包装类型")]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("基本类型")]),s._v(" "),a("p",[s._v("是没有方法和属性 为了便于操作基本类型的值 在调用基本类型的方法和属性时"),a("code",[s._v("js")]),s._v("会隐式转化为对象")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3   js将abc转换为String('abc')")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "ABC"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以使用"),a("code",[s._v("valueof")]),s._v("将包装类型倒转成基本类型")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'abc'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("看看下面一题")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Oops"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// never runs")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 什么都不会打印 因为虽然传入的是一个false 但是false被包裹成包装类型就成为了对象 他的值并非false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"介绍一下js是如何进行隐式转换的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下js是如何进行隐式转换的"}},[s._v("#")]),s._v(" 介绍一下"),a("code",[s._v("JS")]),s._v("是如何进行隐式转换的")]),s._v(" "),a("blockquote",[a("p",[s._v("首先讲讲"),a("code",[s._v("ToPrimitive")]),s._v("方法 这是每个值隐含的方法 用来将值转换为基本类型的值")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果值为对象")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToPrimitive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",[a("li",[a("p",[s._v("当"),a("code",[s._v("type")]),s._v("为"),a("code",[s._v("number")]),s._v("时")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("调用"),a("code",[s._v("object")]),s._v("的"),a("code",[s._v("valueof")]),s._v("方法 如果为原始值则返回 否则进行下一步")])]),s._v(" "),a("li",[a("p",[s._v("调用"),a("code",[s._v("object")]),s._v("的"),a("code",[s._v("toString")]),s._v("方法 后续同上")])]),s._v(" "),a("li",[a("p",[s._v("抛出"),a("code",[s._v("TypeError")])])])])]),s._v(" "),a("li",[a("p",[s._v("当"),a("code",[s._v("type")]),s._v("为"),a("code",[s._v("string")]),s._v("时")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("调用"),a("code",[s._v("toString")]),s._v("方法 后续同上")])]),s._v(" "),a("li",[a("p",[s._v("调用"),a("code",[s._v("valueof")]),s._v("方法")])]),s._v(" "),a("li",[a("p",[s._v("抛出"),a("code",[s._v("TypeError")])])])])])]),s._v(" "),a("p",[a("mark",[s._v("两者最大的不同就是"),a("code",[s._v("tostring")]),s._v("方法和"),a("code",[s._v("valueof")]),s._v("的方法的先后不同")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果对象为"),a("code",[s._v("Date")]),s._v("对象 则"),a("code",[s._v("type")]),s._v("默认为"),a("code",[s._v("string")])])]),s._v(" "),a("li",[a("p",[s._v("其他情况默认为"),a("code",[s._v("number")]),s._v("属性")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 概括为")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("objToNumber")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("objToNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("objToNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[s._v("#")]),s._v(" "),a("code",[s._v("+")]),s._v("操作符")]),s._v(" "),a("p",[s._v("如果两边至少有一个为字符型的 那么两边都会被隐式转成字符串，其他情况两边都被转成数字")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'23'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '123'")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1 ")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Uncaught TypeError: Cannot convert a Symbol value to a number")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '1false'")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"操作符-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符-2"}},[s._v("#")]),s._v(" "),a("code",[s._v("-")]),s._v(" "),a("code",[s._v("*")]),s._v(" "),a("code",[s._v("\\")]),s._v("操作符")]),s._v(" "),a("p",[s._v("优先将值转换为数字"),a("code",[s._v("NaN")]),s._v("也是数字")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'23'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 23")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aa'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"操作符-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符-3"}},[s._v("#")]),s._v(" "),a("code",[s._v("==")]),s._v("操作符")]),s._v(" "),a("p",[s._v("两边的值都尽量转成"),a("code",[s._v("number")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false, 3 转为number为3，true转为number为1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true, '0'转为number为0，false转为number为0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '0'转为number为0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("看一道题")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对比结果如下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// a.toString() // "[object Object]"，现在是一个字符串了')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Number(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN > 2 //false，得出比较结果")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 又比如")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "[object Object][object Object]"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("总结一下")]),s._v(" "),a("p",[s._v("除了加法操作符以外的，两边都会优先转换成"),a("code",[s._v("number")]),s._v("类型")])]),s._v(" "),a("h2",{attrs:{id:"为什么有bigint提案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么有bigint提案"}},[s._v("#")]),s._v(" 为什么有"),a("code",[s._v("BigInt")]),s._v("提案")]),s._v(" "),a("p",[a("code",[s._v("JavaScript")]),s._v("中"),a("code",[s._v("Number.MAX_SAFE_INTEGER")]),s._v("表示最⼤安全数字,即在这个范围内不会出现精度丢失的问题(小数除外)，官方提出"),a("code",[s._v("BigInt")]),s._v("来解决此问题")]),s._v(" "),a("h2",{attrs:{id:"object-assign和扩展运算符是深拷贝还是浅拷贝-两者区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-assign和扩展运算符是深拷贝还是浅拷贝-两者区别"}},[s._v("#")]),s._v(" "),a("code",[s._v("Object.assign")]),s._v("和扩展运算符是深拷贝还是浅拷贝 两者区别")]),s._v(" "),a("blockquote",[a("p",[s._v("扩展运算符")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" outObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  inObj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nnewObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// {inObj: {a: 2, b: 2}}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("blockquote",[a("p",[a("code",[s._v("Object.assign")])])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" outObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  inObj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nnewObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("outObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// {inObj: {a: 2, b: 2}}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[a("mark",[s._v("可以看出两者都是浅拷贝")])])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Object.assign")]),s._v("接收的第一个参数作为目标对象，后面的参数作为源对象 然后将所有源对象合并到目标对象中 他修改了一个对象 触发了"),a("code",[s._v("ES6")]),s._v("的"),a("code",[s._v("setter")])]),s._v(" "),a("li",[s._v("扩展操作符 数组或对象中每一个值都会被拷贝到新的数组或对象中 "),a("strong",[s._v("不复制继承的属性或类的属性")]),s._v(" 但是会复制"),a("code",[s._v("ES6")]),s._v("的"),a("code",[s._v("symbols")]),s._v("属性")])])])}),[],!1,null,null,null);t.default=n.exports}}]);